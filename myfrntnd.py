import sys
import os
import platform
import subprocess
import requests
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt, QThread, pyqtSignal
from PyQt5.QtGui import QMovie, QPainter, QPixmap
from PyQt5.QtWidgets import QApplication, QLabel, QVBoxLayout, QWidget, QSizePolicy, QHBoxLayout, QMainWindow, QPushButton, QFileDialog, QMessageBox, QProgressBar


class UploadWorker(QThread):
    progress = pyqtSignal(int)
    finished = pyqtSignal(bool)

    def __init__(self, file_path):
        super().__init__()
        self.file_path = file_path

    def run(self):
        try:
            url="http://localhost:5000/start_instance"
            response = requests.get(url)
            output_file_path = self.file_path + '.zip'

            if platform.system() == 'Windows':
                command = f'powershell Compress-Archive -Path "{self.file_path}" -DestinationPath "{output_file_path}"'
                subprocess.run(["powershell", "-Command", command], capture_output=True)
            else:
                command = f'zip -r "{output_file_path}" "{self.file_path}"'
                subprocess.run(command, capture_output=True)

            total_size = os.path.getsize(output_file_path)

            url = "http://localhost:5000/upload"  # Replace with your Flask API URL
            files = {'file': open(output_file_path, 'rb')}
            response = requests.post(url, files=files)

            if response.status_code == 200:
                self.progress.emit(total_size)
                self.finished.emit(True)
            else:
                self.finished.emit(False)

        except Exception as e:
            print("Error during file upload:", str(e))
            self.finished.emit(False)


class AnalysisWorker(QThread):
    finished = pyqtSignal(bool)
    def __init__(self):
        super().__init__()
        #self.file_path = file_path

    def run(self):
        url = "http://localhost:5000/analyse"  # Replace with your Flask API URL
        try:
            response = requests.post(url)

            if response.status_code == 200:
                self.finished.emit(True)
            else:
                self.finished.emit(False)

        except Exception as e:
            print("Error during analysis:", str(e))
            self.finished.emit(False)


class ResultWorker(QThread):
    finished = pyqtSignal(str)

    def run(self):
        url = "http://localhost:5000/result"
        try:
            response = requests.post(url)
            if response.status_code == 200:
                r = response.json()
                output = r['output']
                self.finished.emit(output)
            else:
                self.finished.emit(None)
        except Exception as e:
            print("Error during getting result:", str(e))
            self.finished.emit(None)


class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("Malware analysis tool")
        self.setMinimumSize(QtCore.QSize(1370, 800))

        self.bg_label = QtWidgets.QLabel(self)
        self.bg_label.setScaledContents(True)
        self.bg_label.setGeometry(0, 0, self.width(), self.height())

        self.button1 = QPushButton('Upload File', self)
        self.button1.move(1000, 250)
        self.button1.resize(150, 50)
        self.button1.setStyleSheet("background: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 0, stop: 0 #8c52ff, stop: 1 #5ce1e6); border-radius: 10px; font-weight: bold;")
        self.button1.clicked.connect(self.open_file)

        self.button2 = QPushButton('Analyse', self)
        self.button2.resize(150, 50)
        self.button2.setStyleSheet("background: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 0, stop: 0 #8c52ff, stop: 1 #5ce1e6); border-radius: 10px; font-weight: bold;")
        self.button2.move(1000, 350)
        self.button2.clicked.connect(self.analyse_file)

        self.button3 = QPushButton('Result', self)
        self.button3.resize(150, 50)
        self.button3.setStyleSheet("background: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 0, stop: 0 #8c52ff, stop: 1 #5ce1e6); border-radius: 10px; font-weight: bold;")
        self.button3.move(1000, 450)
        self.button3.clicked.connect(self.show_result)

        self.progress_bar = QProgressBar(self)
        self.progress_bar.setGeometry(1000, 550, 200, 25)
        self.progress_bar.setVisible(False)

        self.gif_widget = QWidget(self)
        self.gif_label = QLabel(self.gif_widget)
        self.gif_label.setAlignment(Qt.AlignCenter)

        layout = QVBoxLayout()
        layout.addWidget(self.gif_label)
        self.gif_widget.setLayout(layout)
        self.gif_widget.hide()

        self.upload_worker = None
        self.analysis_worker = None
        self.result_worker = None

    def set_background_image(self, file_path):
        image = QtGui.QImage(file_path)
        scaled_image = image.scaled(self.size(), QtCore.Qt.KeepAspectRatioByExpanding, QtCore.Qt.SmoothTransformation)
        self.bg_label.setPixmap(QtGui.QPixmap.fromImage(scaled_image))

    def open_file(self):
        file_dialog = QFileDialog()
        

        file_path, _ = file_dialog.getOpenFileName(self, 'Select File')

        if file_path:
            self.gif_widget.show()
            self.gif_widget.setGeometry(650, 250, 300, 300)
            self.display_gif("uploading1.webp")
            

            self.upload_worker = UploadWorker(file_path)
           
            self.upload_worker.finished.connect(self.file_upload_finished)
            self.upload_worker.start()
        else:
            self.show_message_box("No file selected.")

    def analyse_file(self):
        self.gif_widget.show()
        self.gif_widget.setGeometry(650, 150, 300, 300)
        self.display_gif("Analysing.gif")
        #self.progress_bar.reset()
        #self.progress_bar.setVisible(True)

        self.analysis_worker = AnalysisWorker()
        #self.analysis_worker.progress.connect(self.update_progress)
        self.analysis_worker.finished.connect(self.analysis_finished)
        self.analysis_worker.start()
        
        #self.analysis_worker.finished.connect(self.analysis_finished)
        #self.analysis_worker.start()

    def show_result(self):
        self.gif_widget.show()
        self.gif_widget.setGeometry(150,100,200,200)
        self.display_gif("Result.gif")
        self.result_worker = ResultWorker()
        self.result_worker.finished.connect(self.result_finished)
        self.result_worker.start()

    def update_progress(self, value):
        self.progress_bar.setValue(value)

    def file_upload_finished(self, success):
        self.gif_widget.hide()
        #self.progress_bar.setVisible(False)

        if success:
            self.show_message_box("File uploaded and transferred successfully!")
        else:
            self.show_message_box("An error occurred during file upload. Please try again.")

    def analysis_finished(self, success):
        self.gif_widget.hide()
        if success:
            self.show_message_box("Analysis completed successfully!")
        else:
            self.show_message_box("An error occurred during analysis. Please try again.")

    def result_finished(self, result):
        self.gif_widget.hide()
        if result is not None:
            if result == '[0]':
                self.show_message_box("There is no malware detected!!!")
            elif result == '[1]':
                self.show_message_box("There is malware, Your system is at risk")
            else:
                self.show_message_box("Unknown result received from the server.")
        else:
            self.show_message_box("An error occurred while getting the result. Please try again.")

    def display_gif(self, gif_file):
        gif = QtGui.QMovie("assert/"+gif_file)
        gif.setScaledSize(QtCore.QSize(200, 200))
        self.gif_label.setMovie(gif)
        gif.start()

    def show_message_box(self, message):
        msg_box = QMessageBox()
        msg_box.setText(message)
        msg_box.exec_()
    def closeEvent(self, event):
        #stop_instance()
        url="http://localhost:5000/stop_instance"
        requests.get(url)
        event.accept()


if __name__ == "__main__":
    app = QApplication(sys.argv)
    main_win = MainWindow()
    main_win.set_background_image('assert/img17.jpg')
    main_win.show()
    sys.exit(app.exec_())

